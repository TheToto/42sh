---

# Notes:
# Sample project C code is not presently written to produce a release artifact.
# As such, release build options are disabled.
# This sample, therefore, only demonstrates running a collection of unit tests.

:project:
  :use_exceptions: FALSE
  :use_test_preprocessor: TRUE
  :use_auxiliary_dependencies: TRUE
  :build_root: build
#  :release_build: TRUE
  :test_file_prefix: test_
  :which_ceedling: vendor/ceedling
  :default_tasks:
    - test:all

#:release_build:
#  :output: MyApp.out
#  :use_assembly: FALSE

:environment:

:extension:
  :executable: .out

:paths:
  :test:
    - +:test/**
    - -:test/support
  :source:
    - src/**
  :support:
    - test/support

:files:
  :support:
    - src/ast/ast_destroy.c;
    - src/ast/ast_node_ampersand.c;
    - src/ast/ast_node_case.c;
    - src/ast/ast_node_fctdec.c;
    - src/ast/ast_node_for.c;
    - src/ast/ast_node_if.c;
    - src/ast/ast_node_logical_and.c;
    - src/ast/ast_node_logical_or.c;
    - src/ast/ast_node_not.c;
    - src/ast/ast_node_pipe.c;
    - src/ast/ast_node_redirect.c;
    - src/ast/ast_node_semicolon.c;
    - src/ast/ast_node_scmd.c;
    - src/ast/ast_node_while.c;
    - src/ast/print_ast.c
    - src/env/functions.c
    - src/env/var.c;
    - src/execution/exec_case.c
    - src/execution/exec_fctdec.c
    - src/execution/exec_logical.c
    - src/execution/exec_pipe.c
    - src/execution/exec_redirect.c
    - src/execution/exec_scmd.c
    - src/execution/execution.c;
    - src/lexer/lexer.c;
    - src/lexer/lexer_func.c;
    - src/options.c;
    - src/parser/rule_andor.c;
    - src/parser/rule_case.c;
    - src/parser/rule_command.c;
    - src/parser/rule_compound_list.c;
    - src/parser/rule_for.c;
    - src/parser/rule_funcdec.c;
    - src/parser/rule_if.c;
    - src/parser/rule_input.c;
    - src/parser/rule_list.c;
    - src/parser/rule_pipe.c;
    - src/parser/rule_pipeline.c;
    - src/parser/rule_redirection.c;
    - src/parser/rule_shell_command.c;
    - src/parser/rule_simple_command.c;
    - src/parser/rule_while.c;
    - src/prompt.c
    - src/readfile.c;

:defines:
  # in order to add common defines:
  #  1) remove the trailing [] from the :common: section
  #  2) add entries to the :common: section (e.g. :test: has TEST defined)
  :commmon: &common_defines []
  :test:
    - *common_defines
    - TEST
  :test_preprocess:
    - *common_defines
    - TEST

:cmock:
  :mock_prefix: mock_
  :when_no_prototypes: :warn
  :enforce_strict_ordering: TRUE
  :plugins:
    - :ignore
    - :callback
  :treat_as:
    uint8:    HEX8
    uint16:   HEX16
    uint32:   UINT32
    int8:     INT8
    bool:     UINT8

:gcov:
    :html_report_type: basic

:tools:
    :test_linker:
        :executable: gcc
        :arguments:
        - ${1} #list of object files to link (Ruby method call param list sub)
        - -lreadline
        - -o ${2} #executable file output (Ruby method call param list sub)

#:tools:
# Ceedling defaults to using gcc for compiling, linking, etc.
# As [:tools] is blank, gcc will be used (so long as it's in your system path)
# See documentation to configure a given toolchain for use

# LIBRARIES
# These libraries are automatically injected into the build process. Those specified as
# common will be used in all types of builds. Otherwise, libraries can be injected in just
# tests or releases. These options are MERGED with the options in supplemental yaml files.
:libraries:
  :placement: :end
  :flag: "${1}"  # or "-L ${1}" for example
  :common: &common_libraries []
  :test:
    - *common_libraries
  :release:
    - *common_libraries

:flags:
  :test:
    :compile:
      :*:
        - "-Wall -Wextra -Werror -std=c99 -pedantic -Isrc/include"
    :link:
      :*:
        - "-Wall -Wextra -Werror -std=c99 -pedantic -Isrc/include"

:plugins:
  :load_paths:
    - vendor/ceedling/plugins
  :enabled:
    - stdout_ide_tests_report
    - module_generator
    - raw_output_report
...
