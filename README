# Project 42sh by louis.holleville, thomas.lupin, arthur.busuttil, sabrina.meng
## Version 0.5

The purpose of this project is to program a shell that have the same
behavior as the bash --posix.

HOW TO COMPILE
    > mkdir build
    > cd build
    > cmake ..
    > make
    > ./42sh [options] [file]

OPTIONS
    -c <command>
        Execute the command given.

    [-+]O
        Enable or disable shopt options (not implemented yet)

    --norc
        This option deactivates the resource reader.

    --ast-print
        This option activates the AST printer.

    --version
        This option prints the current 42sh version on the standard output
        and exits.

COMMANDS
    To have an overview about the possibilities of 42sh, please, refer to the manual. The manual can be read by typing from the root directory of the projet: 
        man -l doc/42sh.1

TEST SUITE
    We used ceedling for the test suite.
    Outside the 42sh/ git directory, launch the following commands:
        > ceedling new 42sh/
        > cd 42sh/
        > ./test/test.sh

    A 'make check' command can be written when the current working directory
    is the 'build' directory. 'make check' run the test-suite without options.

    test.sh:
        Options:

            -l | --list
                Print all possible category

            -c | --category <category 1> ... <category n> ;
                Run tests of selected categories.

            -s | --sanity
                Run test-suite with sanity check

            -t | --timeout <time>
                Run tests with a timeout on global tests

        Description:
            test.sh run two types of tests:
                - unitary tests
                - global tests
            the two types of tests are subdivided into categories wich are
            the same for both.

            unitary testing use ceedling wich run tests located in
            'test/unitary/' subdirectories. The result is parsed and print
            with a more user-friendly display.

            global tests consist in multiple shell scripts located in
            'test/scripts/' subdirectories. Each test are run with bash and
            42sh. The output is compared and if they differ, the test fail.
            according to option a test can fail if it timeout or if any leak
            is found. Fails possibilities are checked in this order:
                leak -> timeout -> difference.

            Each time the test-suite is runned, the project is rebuild to
            be sure of having the last version. As the project stay small this
            is acceptable, thus it is possible that this will be removed
            in future releases.
